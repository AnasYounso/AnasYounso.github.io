{"version":3,"sources":["components/AddButton.js","components/GroupList.js","App.js","serviceWorker.js","index.js"],"names":["AddButton","_ref","value","onChange","react_default","a","createElement","Fragment","type","className","placeholder","$event","preventDefault","target","GroupList","list","updateNote","console","log","handleOnClick","parentNode","style","display","ListGroup_default","map","index","Item","key","onClick","name","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","state","currentTodo","setState","oldState","todoList","concat","toConsumableArray","handleOnChangeCurrentTodo","bg","Jumbotron_default","Container_default","onSubmit","components_AddButton","components_GroupList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAwBeA,EAtBG,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,SAM1B,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLN,MAAOA,EACPO,UAAU,QACVC,YAAY,WACZP,SAZiB,SAAAQ,GACrBA,EAAOC,iBACPT,EAASQ,EAAOE,OAAOX,UAYrBE,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASC,UAAU,UAAhC,uBCQSK,EAtBG,SAAAb,GAAc,IAAXc,EAAWd,EAAXc,KACnB,SAASC,IACPC,QAAQC,IAAI,SAGd,IAAMC,EAAgB,SAAAR,GACpBA,EAAOC,iBACcD,EAAOE,OACfO,WAAWC,MAAMC,QAAU,QAG1C,OACElB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,KACGU,EAAKS,IAAI,SAACtB,EAAOuB,GAAR,OACRrB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAUqB,KAAX,CAAgBC,IAAKF,EAAOhB,UAAU,cACpCL,EAAAC,EAAAC,cAAA,QAAMsB,QAASZ,GAAad,GAC5BE,EAAAC,EAAAC,cAAA,UAAQsB,QAAST,EAAeU,KAAM3B,EAAOO,UAAU,oBCyClDqB,qBAnDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,aAAe,SAAA3B,GACkB,KAA3BoB,EAAKQ,MAAMC,cAGf7B,EAAOC,iBACPmB,EAAKU,SAAS,SAAAC,GACZ,MAAO,CACLC,SAAQ,GAAAC,OAAAZ,OAAAa,EAAA,EAAAb,CAAMU,EAASC,UAAf,CAAyBD,EAASF,cAC1CA,YAAa,QAhBLT,EAqBde,0BAA4B,SAAA5C,GAC1B6B,EAAKU,SAAS,WACZ,MAAO,CACLD,YAAatC,MAtBjB6B,EAAKQ,MAAQ,CACXC,YAAa,GACbG,SAAU,CAAC,mBAJDZ,wEA8BZ,OACE3B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aAAasC,GAAG,SAC7B3C,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CAAWI,UAAU,oBACnBL,EAAAC,EAAAC,cAAC2C,EAAA5C,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,SAAd,aACAL,EAAAC,EAAAC,cAAA,QAAM4C,SAAUhB,KAAKI,cACnBlC,EAAAC,EAAAC,cAAC6C,EAAD,CACEjD,MAAOgC,KAAKK,MAAMC,YAClBrC,SAAU+B,KAAKY,6BAGnB1C,EAAAC,EAAAC,cAAC8C,EAAD,CAAWrC,KAAMmB,KAAKK,MAAMI,sBA3CxBU,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.524c2cf8.chunk.js","sourcesContent":["import React from 'react';\n\nconst AddButton = ({ value, onChange }) => {\n  const handleOnChange = $event => {\n    $event.preventDefault();\n    onChange($event.target.value);\n  };\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={value}\n        className=\"input\"\n        placeholder=\"Add Todo\"\n        onChange={handleOnChange}\n      />\n      <button type=\"submit\" className=\"button\">\n        +\n      </button>\n    </>\n  );\n};\n\nexport default AddButton;\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nconst GroupList = ({ list }) => {\n  function updateNote() {\n    console.log('works');\n  }\n\n  const handleOnClick = $event => {\n    $event.preventDefault();\n    const childElement = $event.target;\n    childElement.parentNode.style.display = 'none';\n  };\n\n  return (\n    <ListGroup>\n      {list.map((value, index) => (\n        <ListGroup.Item key={index} className=\"list__item\">\n          <span onClick={updateNote}>{value}</span>\n          <button onClick={handleOnClick} name={value} className=\"delete-btn\" />\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n};\nexport default GroupList;\n","import React, { Component } from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport AddButton from './components/AddButton';\nimport GroupList from './components/GroupList';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentTodo: '',\n      todoList: ['Check the list']\n    };\n  }\n\n  handleSubmit = $event => {\n    if (this.state.currentTodo === '') {\n      return;\n    }\n    $event.preventDefault();\n    this.setState(oldState => {\n      return {\n        todoList: [...oldState.todoList, oldState.currentTodo],\n        currentTodo: ''\n      };\n    });\n  };\n\n  handleOnChangeCurrentTodo = value => {\n    this.setState(() => {\n      return {\n        currentTodo: value\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"containter\" bg=\"light\">\n        <Jumbotron className=\"custom-jumborton\">\n          <Container>\n            <div className=\"text-center\">\n              <h1 className=\"title\">Todo List</h1>\n              <form onSubmit={this.handleSubmit}>\n                <AddButton\n                  value={this.state.currentTodo}\n                  onChange={this.handleOnChangeCurrentTodo}\n                />\n              </form>\n              <GroupList list={this.state.todoList} />\n            </div>\n          </Container>\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}